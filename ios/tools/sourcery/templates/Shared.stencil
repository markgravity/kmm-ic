import Shared
import KMPNativeCoroutinesCombine
import Combine

{% for type in types.protocols where type.name | hasSuffix:"UseCase" %}
  {% for method in type.methods where method.name | hasPrefix:"invokeAsNative(" %}
extension {{ type.name }} {

  func invokeAsPublisher(
    {% for parameter in method.parameters %}
    {{ parameter.asSource }}{% if not forloop.last %},{% endif %}
    {% endfor %}
  ) -> AnyPublisher<{{ method.returnTypeName.closure.parameters[0].typeName.closure.parameters[0].typeName }}, {{ method.returnTypeName.closure.parameters[1].typeName.closure.parameters[0].typeName|replace:"?","" }}> {
    let call = invokeAsNative(
      {% for parameter in method.parameters %}
      {{ parameter.name }}: {{ parameter.name }}{% if not forloop.last %},{% endif %}
      {% endfor %}
    )
    return createPublisher(for: call)
  }
}
	 {% endfor %}
{% endfor %}
